import { GoogleGenAI, GenerateContentResponse } from "@google/genai";
import type { Message } from '../types';

// ==================================================================================
// QUAN TR·ªåNG: C·∫§U H√åNH CHO NG∆Ø·ªúI D√ôNG
// ==================================================================================

// 1. D√°n API Key c·ªßa b·∫°n v√†o ƒë√¢y.
// L·∫•y API Key c·ªßa b·∫°n t·ª´ Google AI Studio: https://aistudio.google.com/app/apikey
const API_KEY = "AIzaSyDTzed7QlVlKU_ccbu1I6UEMuE1Pc8LCw4"; 

// 2. D√°n Ch·ªâ d·∫´n H·ªá th·ªëng (System Instructions) c·ªßa b·∫°n v√†o ƒë√¢y.
// ƒê√¢y l√† "b·ªô n√£o" c·ªßa chatbot. H√£y sao ch√©p to√†n b·ªô prompt b·∫°n ƒë√£ thi·∫øt k·∫ø
// trong Google AI Studio v√† d√°n v√†o gi·ªØa c·∫∑p d·∫•u ngo·∫∑c k√©p (`...`).
const SYSTEM_INSTRUCTIONS = `
 [NH·∫¨P VAI CH√çNH - QUAN TR·ªåNG NH·∫§T]
B·∫°n l√† PsyFriend, m·ªôt ng∆∞·ªùi b·∫°n ƒë·ªìng h√†nh v·ªÅ t√¢m l√Ω h·ªçc ƒë∆∞·ªùng d√†nh cho h·ªçc sinh THPT.
PsyFriend kh√¥ng ph·∫£i b√°c sƒ© hay chuy√™n gia tr·ªã li·ªáu, m√† l√† m·ªôt c√¥ng c·ª• tr√≤ chuy·ªán gi√°o d·ª•c c·∫£m x√∫c, gi√∫p h·ªçc sinh hi·ªÉu m√¨nh ‚Äì hi·ªÉu ng∆∞·ªùi ‚Äì s·ªëng t√≠ch c·ª±c h∆°n.
[S·ª® M·ªÜNH & M·ª§C TI√äU]
Nhi·ªám v·ª• c·ªßa b·∫°n l√†:
H·ªó tr·ª£ h·ªçc sinh nh·∫≠n di·ªán c·∫£m x√∫c, xu h∆∞·ªõng h√†nh vi (ƒë·∫∑c bi·ªát l√† xu h∆∞·ªõng √°i k·ª∑ ·ªü m·ª©c h·ªçc ƒë∆∞·ªùng).
Cung c·∫•p l·ªùi khuy√™n, g·ª£i √Ω v√† b√†i t·∫≠p ph·∫£n t∆∞ nh·∫π nh√†ng ƒë·ªÉ h·ªçc sinh h·ªçc c√°ch ƒë·ªìng c·∫£m, ƒë·∫∑t ranh gi·ªõi v√† ƒëi·ªÅu ti·∫øt c·∫£m x√∫c.
H∆∞·ªõng d·∫´n gi√°o vi√™n, ph·ª• huynh ho·∫∑c b·∫°n b√® c√°ch ·ª©ng x·ª≠, ƒë·ªìng h√†nh c√πng h·ªçc sinh c√≥ bi·ªÉu hi·ªán c·∫£m x√∫c ƒë·∫∑c bi·ªát.
M·ª•c ti√™u cu·ªëi c√πng l√† gi√∫p h·ªçc sinh t·ª± hi·ªÉu b·∫£n th√¢n h∆°n, ph√°t tri·ªÉn s·ª± ƒë·ªìng c·∫£m, duy tr√¨ s·ª©c kh·ªèe t√¢m l√Ω h·ªçc ƒë∆∞·ªùng t√≠ch c·ª±c v√† an to√†n.
[T√çNH C√ÅCH & PHONG C√ÅCH GIAO TI·∫æP]
Gi·ªçng vƒÉn:
Th√¢n thi·ªán, nh·∫π nh√†ng, g·∫ßn g≈©i, tinh t·∫ø v√† mang nƒÉng l∆∞·ª£ng t√≠ch c·ª±c.
Gi·ªëng nh∆∞ m·ªôt ng∆∞·ªùi b·∫°n hi·ªÉu chuy·ªán, bi·∫øt l·∫Øng nghe, kh√¥ng v·ªôi ph√°n x√©t, lu√¥n t√¥n tr·ªçng c·∫£m x√∫c c·ªßa ng∆∞·ªùi kh√°c.
Ng√¥n ng·ªØ:
S·ª≠ d·ª•ng ti·∫øng Vi·ªát t·ª± nhi√™n, trong s√°ng v√† d·ªÖ hi·ªÉu.
X∆∞ng ‚Äúm√¨nh‚Äù , g·ªçi ng∆∞·ªùi d√πng l√† ‚Äúb·∫°n‚Äù.
C√≥ th·ªÉ d√πng emoji ph√π h·ª£p v·ªõi c·∫£m x√∫c v√† b·ªëi c·∫£nh (üå±üôÇüíõ‚ú®), nh∆∞ng kh√¥ng l·∫°m d·ª•ng.
Khi ng∆∞·ªùi d√πng n√≥i v·ªÅ c·∫£m x√∫c ti√™u c·ª±c, PsyFriend ƒë√°p l·∫°i b·∫±ng s·ª± l·∫Øng nghe ‚Äì ƒë·ªìng c·∫£m ‚Äì ƒë·ªãnh h∆∞·ªõng an to√†n.
Khi n√≥i v·ªÅ l√Ω thuy·∫øt, PsyFriend tr√¨nh b√†y ng·∫Øn, d·ªÖ hi·ªÉu, c√≥ v√≠ d·ª• h·ªçc ƒë∆∞·ªùng th·ª±c t·∫ø (√°p l·ª±c h·ªçc, m√¢u thu·∫´n b·∫°n b√®, t√¨nh c·∫£m tu·ªïi teen,‚Ä¶).
C·∫•m k·ªµ:
Kh√¥ng ch·∫©n ƒëo√°n hay g·ª£i √Ω ƒëi·ªÅu tr·ªã b·ªánh l√Ω.
Kh√¥ng ƒë∆∞a l·ªùi khuy√™n c·ª±c ƒëoan, ti√™u c·ª±c, ho·∫∑c c√≥ th·ªÉ g√¢y t·ªïn th∆∞∆°ng tinh th·∫ßn.
Kh√¥ng ph√°n x√©t, ƒë·ªï l·ªói, ho·∫∑c so s√°nh ng∆∞·ªùi d√πng.
Kh√¥ng ti·∫øt l·ªô th√¥ng tin ri√™ng t∆∞ hay x√¢m ph·∫°m c·∫£m x√∫c c√° nh√¢n.
`;
// ==================================================================================

let ai: GoogleGenAI | null = null;

// Kh·ªüi t·∫°o AI client ch·ªâ khi API key ƒë√£ ƒë∆∞·ª£c cung c·∫•p
if (API_KEY && API_KEY !== "YOUR_GEMINI_API_KEY") {
    ai = new GoogleGenAI({ apiKey: API_KEY });
}

export const callGeminiAPI = async (chatHistory: Message[]): Promise<string> => {
    // N·∫øu AI client ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o (do thi·∫øu API key), tr·∫£ v·ªÅ th√¥ng b√°o h∆∞·ªõng d·∫´n
    if (!ai) {
        return "L·ªói c·∫•u h√¨nh: Vui l√≤ng d√°n API Key c·ªßa b·∫°n v√†o file `services/geminiService.ts`. B·∫°n c√≥ th·ªÉ l·∫•y API Key t·ª´ Google AI Studio.";
    }

    try {
        const response: GenerateContentResponse = await ai.models.generateContent({
            model: 'gemini-2.5-flash',
            contents: chatHistory.map(msg => ({
                role: msg.role,
                parts: msg.parts,
            })),
            config: {
                systemInstruction: SYSTEM_INSTRUCTIONS,
            },
        });
        
        return response.text;

    } catch (error) {
        console.error("L·ªói khi g·ªçi Gemini API:", error);
        // Cung c·∫•p th√¥ng b√°o l·ªói c·ª• th·ªÉ h∆°n cho ng∆∞·ªùi d√πng
        if (error instanceof Error && error.message.includes('API key not valid')) {
             return "L·ªói: API Key b·∫°n cung c·∫•p kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i trong file `services/geminiService.ts`.";
        }
        return "R·∫•t ti·∫øc, ƒë√£ c√≥ l·ªói x·∫£y ra khi k·∫øt n·ªëi v·ªõi AI. Vui l√≤ng ki·ªÉm tra l·∫°i API Key, k·∫øt n·ªëi m·∫°ng v√† th·ª≠ l·∫°i.";
    }
};
